

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu Nov 11 17:04:34 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og9 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    25                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    27  0000                     
    28                           ; Version 2.20
    29                           ; Generated 12/02/2020 GMT
    30                           ; 
    31                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4620 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	idataCOMRAM
    64  0013CC                     __pidataCOMRAM:
    65                           	callstack 0
    66                           
    67                           ;initializer for _debug_msg_2
    68  0013CC  52                 	db	82
    69  0013CD  78                 	db	120
    70  0013CE  3A                 	db	58
    71  0013CF  20                 	db	32
    72  0013D0  30                 	db	48
    73  0013D1  78                 	db	120
    74  0013D2  00                 	db	0
    75  0013D3  00                 	db	0
    76  0013D4  00                 	db	0
    77  0013D5  00                 	db	0
    78  0013D6  00                 	db	0
    79  0013D7  00                 	db	0
    80  0013D8  00                 	db	0
    81  0013D9  00                 	db	0
    82  0013DA  00                 	db	0
    83  0013DB  00                 	db	0
    84                           
    85                           ;initializer for _debug_msg_1
    86  0013DC  52                 	db	82
    87  0013DD  78                 	db	120
    88  0013DE  3A                 	db	58
    89  0013DF  20                 	db	32
    90  0013E0  00                 	db	0
    91  0013E1  00                 	db	0
    92  0013E2  00                 	db	0
    93  0013E3  00                 	db	0
    94  0013E4  00                 	db	0
    95  0013E5  00                 	db	0
    96  0013E6  00                 	db	0
    97  0013E7  00                 	db	0
    98  0013E8  00                 	db	0
    99  0013E9  00                 	db	0
   100  0013EA  00                 	db	0
   101  0013EB  00                 	db	0
   102                           
   103                           ;initializer for main@F2571
   104  0013EC  49                 	db	73
   105  0013ED  6E                 	db	110
   106  0013EE  69                 	db	105
   107  0013EF  74                 	db	116
   108  0013F0  20                 	db	32
   109  0013F1  73                 	db	115
   110  0013F2  75                 	db	117
   111  0013F3  63                 	db	99
   112  0013F4  63                 	db	99
   113  0013F5  65                 	db	101
   114  0013F6  73                 	db	115
   115  0013F7  73                 	db	115
   116  0013F8  21                 	db	33
   117  0013F9  00                 	db	0
   118                           
   119                           ;initializer for _button2_msg
   120  0013FA  42                 	db	66
   121  0013FB  32                 	db	50
   122  0013FC  3A                 	db	58
   123  0013FD  20                 	db	32
   124  0013FE  00                 	db	0
   125                           
   126                           ;initializer for _button1_msg
   127  0013FF  42                 	db	66
   128  001400  31                 	db	49
   129  001401  3A                 	db	58
   130  001402  20                 	db	32
   131  001403  00                 	db	0
   132                           
   133                           ;initializer for _current_func_set
   134  001404  30                 	db	48
   135                           
   136                           ;initializer for _current_entry_mode
   137  001405  06                 	db	6
   138                           
   139                           ;initializer for _disp_16x2
   140  001406  01                 	db	1
   141                           
   142                           ;initializer for _current_disp_ctrl
   143  001407  08                 	db	8
   144                           
   145                           	psect	smallconst
   146  001000                     __psmallconst:
   147                           	callstack 0
   148  001000  00                 	db	0
   149  001001                     _spi_rx_invalid_msg:
   150                           	callstack 0
   151  001001  49                 	db	73
   152  001002  4E                 	db	78
   153  001003  56                 	db	86
   154  001004  41                 	db	65
   155  001005  4C                 	db	76
   156  001006  49                 	db	73
   157  001007  44                 	db	68
   158  001008  20                 	db	32
   159  001009  4D                 	db	77
   160  00100A  53                 	db	83
   161  00100B  47                 	db	71
   162  00100C  21                 	db	33
   163  00100D  00                 	db	0
   164  00100E                     __end_of_spi_rx_invalid_msg:
   165                           	callstack 0
   166  0000                     _INTCONbits	set	4082
   167  0000                     _TRISA	set	3986
   168  0000                     _PIR1bits	set	3998
   169  0000                     _SSPBUF	set	4041
   170  0000                     _SSPSTAT	set	4039
   171  0000                     _SSPCON1	set	4038
   172  0000                     _SSPCON1bits	set	4038
   173  0000                     _PORTC	set	3970
   174  0000                     _PORTD	set	3971
   175  0000                     _TRISC	set	3988
   176  0000                     _LATCbits	set	3979
   177  0000                     _TRISD	set	3989
   178  0000                     _LATDbits	set	3980
   179  0000                     _PIE1bits	set	3997
   180  00100E  00                 	db	0	; dummy byte at the end
   181  0000                     
   182                           ; #config settings
   183                           
   184                           	psect	cinit
   185  001408                     __pcinit:
   186                           	callstack 0
   187  001408                     start_initialization:
   188                           	callstack 0
   189  001408                     __initialization:
   190                           	callstack 0
   191                           
   192                           ; Initialize objects allocated to COMRAM (60 bytes)
   193                           ; load TBLPTR registers with __pidataCOMRAM
   194  001408  0ECC               	movlw	low __pidataCOMRAM
   195  00140A  6EF6               	movwf	tblptrl,c
   196  00140C  0E13               	movlw	high __pidataCOMRAM
   197  00140E  6EF7               	movwf	tblptrh,c
   198  001410  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   199  001412  6EF8               	movwf	tblptru,c
   200  001414  EE00  F001         	lfsr	0,__pdataCOMRAM
   201  001418  EE10 F03C          	lfsr	1,60
   202  00141C                     copy_data0:
   203  00141C  0009               	tblrd		*+
   204  00141E  CFF5 FFEE          	movff	tablat,postinc0
   205  001422  50E5               	movf	postdec1,w,c
   206  001424  50E1               	movf	fsr1l,w,c
   207  001426  E1FA               	bnz	copy_data0
   208                           
   209                           ; Clear objects allocated to COMRAM (25 bytes)
   210  001428  EE00  F05D         	lfsr	0,__pbssCOMRAM
   211  00142C  0E19               	movlw	25
   212  00142E                     clear_0:
   213  00142E  6AEE               	clrf	postinc0,c
   214  001430  06E8               	decf	wreg,f,c
   215  001432  E1FD               	bnz	clear_0
   216  001434                     end_of_initialization:
   217                           	callstack 0
   218  001434                     __end_of__initialization:
   219                           	callstack 0
   220  001434  9076               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   221  001436  9276               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   222  001438  0E00               	movlw	low (__Lmediumconst shr (0+16))
   223  00143A  6EF8               	movwf	tblptru,c
   224  00143C  0100               	movlb	0
   225  00143E  EF08  F008         	goto	_main	;jump to C main() function
   226                           
   227                           	psect	bssCOMRAM
   228  00005D                     __pbssCOMRAM:
   229                           	callstack 0
   230  00005D                     	ds	10
   231  000067                     _button2_state:
   232                           	callstack 0
   233  000067                     	ds	1
   234  000068                     _button1_state:
   235                           	callstack 0
   236  000068                     	ds	1
   237  000069                     _spi_rx_flag:
   238                           	callstack 0
   239  000069                     	ds	1
   240  00006A                     _spi_rx_invalid_flag:
   241                           	callstack 0
   242  00006A                     	ds	1
   243  00006B                     _spi_rx_msg_buf:
   244                           	callstack 0
   245  00006B                     	ds	1
   246  00006C                     _manual_transfer:
   247                           	callstack 0
   248  00006C                     	ds	1
   249  00006D                     _transfer_complete_flag:
   250                           	callstack 0
   251  00006D                     	ds	1
   252  00006E                     	ds	1
   253  00006F                     _spi_actor:
   254                           	callstack 0
   255  00006F                     	ds	1
   256  000070                     _receive_byte:
   257                           	callstack 0
   258  000070                     	ds	1
   259  000071                     _address_counter:
   260                           	callstack 0
   261  000071                     	ds	1
   262  000072                     	ds	1
   263  000073                     _init_complete:
   264                           	callstack 0
   265  000073                     	ds	1
   266  000074                     _DISP_BIT_MODE:
   267                           	callstack 0
   268  000074                     	ds	1
   269  000075                     _CURRENT_DISP:
   270                           	callstack 0
   271  000075                     	ds	1
   272                           
   273                           	psect	dataCOMRAM
   274  000001                     __pdataCOMRAM:
   275                           	callstack 0
   276  000001                     	ds	16
   277  000011                     	ds	16
   278  000021                     main@F2571:
   279                           	callstack 0
   280  000021                     	ds	14
   281  00002F                     _button2_msg:
   282                           	callstack 0
   283  00002F                     	ds	5
   284  000034                     _button1_msg:
   285                           	callstack 0
   286  000034                     	ds	5
   287  000039                     _current_func_set:
   288                           	callstack 0
   289  000039                     	ds	1
   290  00003A                     _current_entry_mode:
   291                           	callstack 0
   292  00003A                     	ds	1
   293  00003B                     	ds	1
   294  00003C                     _current_disp_ctrl:
   295                           	callstack 0
   296  00003C                     	ds	1
   297                           
   298                           	psect	cstackCOMRAM
   299  00003D                     __pcstackCOMRAM:
   300                           	callstack 0
   301  00003D                     ??_isr:
   302  00003D                     
   303                           ; 1 bytes @ 0x0
   304  00003D                     	ds	1
   305  00003E                     ??_LCD_enable_toggle:
   306  00003E                     
   307                           ; 1 bytes @ 0x1
   308  00003E                     	ds	2
   309  000040                     ??_LCD_write_data_byte_4bit:
   310  000040                     ??_LCD_write_instr_byte_4bit:
   311  000040                     ??_LCD_write_instr_byte_8bit:
   312                           
   313                           ; 1 bytes @ 0x3
   314  000040                     	ds	1
   315  000041                     LCD_write_data_byte_4bit@data:
   316                           	callstack 0
   317  000041                     LCD_write_instr_byte_4bit@instr:
   318                           	callstack 0
   319  000041                     LCD_write_instr_byte_8bit@instr:
   320                           	callstack 0
   321                           
   322                           ; 1 bytes @ 0x4
   323  000041                     	ds	1
   324  000042                     ??_LCD_clear_display:
   325  000042                     ??_LCD_Init_ECE376:
   326  000042                     LCD_set_cursor_position@pos_on_line:
   327                           	callstack 0
   328                           
   329                           ; 1 bytes @ 0x5
   330  000042                     	ds	1
   331  000043                     LCD_set_cursor_position@ddram_addr:
   332                           	callstack 0
   333                           
   334                           ; 1 bytes @ 0x6
   335  000043                     	ds	1
   336  000044                     LCD_set_cursor_position@line:
   337                           	callstack 0
   338                           
   339                           ; 1 bytes @ 0x7
   340  000044                     	ds	1
   341  000045                     ??_main:
   342                           
   343                           ; 1 bytes @ 0x8
   344  000045                     	ds	2
   345  000047                     main@init_success_msg:
   346                           	callstack 0
   347                           
   348                           ; 14 bytes @ 0xA
   349  000047                     	ds	14
   350  000055                     _main$701:
   351                           	callstack 0
   352                           
   353                           ; 2 bytes @ 0x18
   354  000055                     	ds	2
   355  000057                     _main$702:
   356                           	callstack 0
   357                           
   358                           ; 2 bytes @ 0x1A
   359  000057                     	ds	2
   360  000059                     main@i:
   361                           	callstack 0
   362                           
   363                           ; 1 bytes @ 0x1C
   364  000059                     	ds	1
   365  00005A                     main@i_700:
   366                           	callstack 0
   367                           
   368                           ; 1 bytes @ 0x1D
   369  00005A                     	ds	1
   370  00005B                     main@i_703:
   371                           	callstack 0
   372                           
   373                           ; 1 bytes @ 0x1E
   374  00005B                     	ds	1
   375  00005C                     main@i_704:
   376                           	callstack 0
   377                           
   378                           ; 1 bytes @ 0x1F
   379  00005C                     	ds	1
   380                           
   381 ;;
   382 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   383 ;;
   384 ;; *************** function _main *****************
   385 ;; Defined at:
   386 ;;		line 199 in file "spi_test.c"
   387 ;; Parameters:    Size  Location     Type
   388 ;;		None
   389 ;; Auto vars:     Size  Location     Type
   390 ;;  i               1   31[COMRAM] unsigned char 
   391 ;;  i               1   30[COMRAM] unsigned char 
   392 ;;  i               1   29[COMRAM] unsigned char 
   393 ;;  i               1   28[COMRAM] unsigned char 
   394 ;;  init_success   14   10[COMRAM] unsigned char [14]
   395 ;; Return value:  Size  Location     Type
   396 ;;                  1    wreg      void 
   397 ;; Registers used:
   398 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   399 ;; Tracked objects:
   400 ;;		On entry : 0/0
   401 ;;		On exit  : 0/0
   402 ;;		Unchanged: 0/0
   403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   405 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   406 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   407 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   408 ;;Total ram usage:       24 bytes
   409 ;; Hardware stack levels required when called:    4
   410 ;; This function calls:
   411 ;;		_LCD_Init_ECE376
   412 ;;		_LCD_clear_display
   413 ;;		_LCD_set_cursor_position
   414 ;;		_LCD_write_data_byte_4bit
   415 ;;		_SPI_Init_Slave_Default
   416 ;; This function is called by:
   417 ;;		Startup code after reset
   418 ;; This function uses a non-reentrant model
   419 ;;
   420                           
   421                           	psect	text0
   422  001010                     __ptext0:
   423                           	callstack 0
   424  001010                     _main:
   425                           	callstack 27
   426                           
   427                           ;spi_test.c: 288:     LCD_Init_ECE376();
   428                           
   429                           ;incstack = 0
   430  001010  EC9D  F008         	call	_LCD_Init_ECE376	;wreg free
   431                           
   432                           ;spi_test.c: 289:     SPI_Init_Slave_Default();
   433  001014  EC61  F00A         	call	_SPI_Init_Slave_Default	;wreg free
   434                           
   435                           ;spi_test.c: 292:     (INTCONbits.PEIE = 1u);
   436  001018  8CF2               	bsf	242,6,c	;volatile
   437                           
   438                           ;spi_test.c: 293:     (INTCONbits.GIE = 1);
   439  00101A  8EF2               	bsf	242,7,c	;volatile
   440                           
   441                           ;spi_test.c: 295:     LCD_set_cursor_position(1,1);
   442  00101C  0E01               	movlw	1
   443  00101E  6E42               	movwf	LCD_set_cursor_position@pos_on_line^0,c
   444  001020  0E01               	movlw	1
   445  001022  EC66  F009         	call	_LCD_set_cursor_position
   446                           
   447                           ;spi_test.c: 296:     char init_success_msg[] = "Init success!";
   448  001026  EE20  F021         	lfsr	2,main@F2571
   449  00102A  EE10  F047         	lfsr	1,main@init_success_msg
   450  00102E  0E0D               	movlw	13
   451  001030                     u331:
   452  001030  CFDB FFE3          	movff	plusw2,plusw1
   453  001034  06E8               	decf	wreg,f,c
   454  001036  E2FC               	bc	u331
   455                           
   456                           ;spi_test.c: 297:     for(uint8_t i=0; i<13; i++) LCD_write_data_byte_4bit(init_success_
      +                          msg[i]);
   457  001038  0E00               	movlw	0
   458  00103A  6E59               	movwf	main@i^0,c
   459  00103C                     l1604:
   460  00103C  5059               	movf	main@i^0,w,c
   461  00103E  0F47               	addlw	low main@init_success_msg
   462  001040  6ED9               	movwf	fsr2l,c
   463  001042  6ADA               	clrf	fsr2h,c
   464  001044  50DF               	movf	indf2,w,c
   465  001046  EC98  F009         	call	_LCD_write_data_byte_4bit
   466  00104A  2A59               	incf	main@i^0,f,c
   467  00104C  0E0C               	movlw	12
   468  00104E  6459               	cpfsgt	main@i^0,c
   469  001050  D7F5               	goto	l1604
   470                           
   471                           ;spi_test.c: 300:     _delay((unsigned long)((2000)*(40000000U/4000.0)));
   472  001052  0E66               	movlw	102
   473  001054  6E46               	movwf	(??_main+1)^0,c
   474  001056  0E76               	movlw	118
   475  001058  6E45               	movwf	??_main^0,c
   476  00105A  0EC1               	movlw	193
   477  00105C                     u427:
   478  00105C  2EE8               	decfsz	wreg,f,c
   479  00105E  D7FE               	bra	u427
   480  001060  2E45               	decfsz	??_main^0,f,c
   481  001062  D7FC               	bra	u427
   482  001064  2E46               	decfsz	(??_main+1)^0,f,c
   483  001066  D7FA               	bra	u427
   484  001068  F000               	nop	
   485                           
   486                           ;spi_test.c: 301:     LCD_clear_display();
   487  00106A  EC4F  F00A         	call	_LCD_clear_display	;wreg free
   488  00106E                     l1614:
   489                           
   490                           ;spi_test.c: 306:         if(spi_rx_flag) {
   491  00106E  5069               	movf	_spi_rx_flag^0,w,c
   492  001070  B4D8               	btfsc	status,2,c
   493  001072  D7FD               	goto	l1614
   494                           
   495                           ;spi_test.c: 338:             if(spi_rx_invalid_flag) {
   496  001074  506A               	movf	_spi_rx_invalid_flag^0,w,c
   497  001076  B4D8               	btfsc	status,2,c
   498  001078  D01D               	goto	l356
   499                           
   500                           ;spi_test.c: 340:                 LCD_clear_display();
   501  00107A  EC4F  F00A         	call	_LCD_clear_display	;wreg free
   502                           
   503                           ;spi_test.c: 343:                 LCD_set_cursor_position(1,1);
   504  00107E  0E01               	movlw	1
   505  001080  6E42               	movwf	LCD_set_cursor_position@pos_on_line^0,c
   506  001082  0E01               	movlw	1
   507  001084  EC66  F009         	call	_LCD_set_cursor_position
   508                           
   509                           ;spi_test.c: 344:                 for(uint8_t i=0; i<12; i++){
   510  001088  0E00               	movlw	0
   511  00108A  6E5A               	movwf	main@i_700^0,c
   512  00108C                     l1626:
   513                           
   514                           ;spi_test.c: 345:                     LCD_write_data_byte_4bit(spi_rx_invalid_msg[i]);
   515  00108C  505A               	movf	main@i_700^0,w,c
   516  00108E  0F01               	addlw	low _spi_rx_invalid_msg
   517  001090  6E45               	movwf	??_main^0,c
   518  001092  C045  FFF6         	movff	??_main,tblptrl
   519  001096                     	if	1	;There is more than 1 active tblptr byte
   520  001096  0E10               	movlw	high __smallconst
   521  001098  6EF7               	movwf	tblptrh,c
   522  00109A                     	endif
   523  00109A                     	if	0	;tblptru may be non-zero
   524  00109A                     	endif
   525  00109A                     	if	0	;tblptru may be non-zero
   526  00109A                     	endif
   527  00109A  0008               	tblrd		*
   528  00109C  50F5               	movf	tablat,w,c
   529  00109E  EC98  F009         	call	_LCD_write_data_byte_4bit
   530                           
   531                           ;spi_test.c: 346:                 }
   532  0010A2  2A5A               	incf	main@i_700^0,f,c
   533  0010A4  0E0B               	movlw	11
   534  0010A6  645A               	cpfsgt	main@i_700^0,c
   535  0010A8  D7F1               	goto	l1626
   536                           
   537                           ;spi_test.c: 348:                 spi_rx_flag = 0x00;
   538  0010AA  0E00               	movlw	0
   539  0010AC  6E69               	movwf	_spi_rx_flag^0,c
   540                           
   541                           ;spi_test.c: 349:                 spi_rx_invalid_flag = 0x00u;
   542  0010AE  0E00               	movlw	0
   543  0010B0  6E6A               	movwf	_spi_rx_invalid_flag^0,c
   544                           
   545                           ;spi_test.c: 351:             } else {
   546  0010B2  D7DD               	goto	l1614
   547  0010B4                     l356:
   548                           
   549                           ;spi_test.c: 354:                 button1_state = (spi_rx_msg_buf & (1u << 0u)) ? '1' : 
      +                          '0';
   550  0010B4  B06B               	btfsc	_spi_rx_msg_buf^0,0,c
   551  0010B6  D004               	goto	l1636
   552  0010B8  0E00               	movlw	0
   553  0010BA  6E56               	movwf	(_main$701+1)^0,c
   554  0010BC  0E30               	movlw	48
   555  0010BE  D003               	goto	L1
   556  0010C0                     l1636:
   557  0010C0  0E00               	movlw	0
   558  0010C2  6E56               	movwf	(_main$701+1)^0,c
   559  0010C4  0E31               	movlw	49
   560  0010C6                     L1:
   561  0010C6  6E55               	movwf	_main$701^0,c
   562  0010C8  C055  F068         	movff	_main$701,_button1_state
   563                           
   564                           ;spi_test.c: 355:                 button2_state = (spi_rx_msg_buf & (1u << 1u)) ? '1' : 
      +                          '0';
   565  0010CC  B26B               	btfsc	_spi_rx_msg_buf^0,1,c
   566  0010CE  D004               	goto	l1644
   567  0010D0  0E00               	movlw	0
   568  0010D2  6E58               	movwf	(_main$702+1)^0,c
   569  0010D4  0E30               	movlw	48
   570  0010D6  D003               	goto	L2
   571  0010D8                     l1644:
   572  0010D8  0E00               	movlw	0
   573  0010DA  6E58               	movwf	(_main$702+1)^0,c
   574  0010DC  0E31               	movlw	49
   575  0010DE                     L2:
   576  0010DE  6E57               	movwf	_main$702^0,c
   577  0010E0  C057  F067         	movff	_main$702,_button2_state
   578                           
   579                           ;spi_test.c: 356:                 button1_msg[4] = button1_state;
   580  0010E4  C068  F038         	movff	_button1_state,_button1_msg+4
   581                           
   582                           ;spi_test.c: 357:                 button2_msg[4] = button2_state;
   583  0010E8  C067  F033         	movff	_button2_state,_button2_msg+4
   584                           
   585                           ;spi_test.c: 361:                 LCD_set_cursor_position(1,1);
   586  0010EC  0E01               	movlw	1
   587  0010EE  6E42               	movwf	LCD_set_cursor_position@pos_on_line^0,c
   588  0010F0  0E01               	movlw	1
   589  0010F2  EC66  F009         	call	_LCD_set_cursor_position
   590                           
   591                           ;spi_test.c: 362:                 for(uint8_t i=0; i<5; i++){
   592  0010F6  0E00               	movlw	0
   593  0010F8  6E5B               	movwf	main@i_703^0,c
   594  0010FA                     l1660:
   595                           
   596                           ;spi_test.c: 363:                     LCD_write_data_byte_4bit(button1_msg[i]);
   597  0010FA  505B               	movf	main@i_703^0,w,c
   598  0010FC  0F34               	addlw	low _button1_msg
   599  0010FE  6ED9               	movwf	fsr2l,c
   600  001100  6ADA               	clrf	fsr2h,c
   601  001102  50DF               	movf	indf2,w,c
   602  001104  EC98  F009         	call	_LCD_write_data_byte_4bit
   603                           
   604                           ;spi_test.c: 364:                 }
   605  001108  2A5B               	incf	main@i_703^0,f,c
   606  00110A  0E04               	movlw	4
   607  00110C  645B               	cpfsgt	main@i_703^0,c
   608  00110E  D7F5               	goto	l1660
   609                           
   610                           ;spi_test.c: 366:                 LCD_set_cursor_position(2,1);
   611  001110  0E01               	movlw	1
   612  001112  6E42               	movwf	LCD_set_cursor_position@pos_on_line^0,c
   613  001114  0E02               	movlw	2
   614  001116  EC66  F009         	call	_LCD_set_cursor_position
   615                           
   616                           ;spi_test.c: 367:                 for(uint8_t i=0; i<5; i++){
   617  00111A  0E00               	movlw	0
   618  00111C  6E5C               	movwf	main@i_704^0,c
   619  00111E                     l1674:
   620                           
   621                           ;spi_test.c: 368:                     LCD_write_data_byte_4bit(button2_msg[i]);
   622  00111E  505C               	movf	main@i_704^0,w,c
   623  001120  0F2F               	addlw	low _button2_msg
   624  001122  6ED9               	movwf	fsr2l,c
   625  001124  6ADA               	clrf	fsr2h,c
   626  001126  50DF               	movf	indf2,w,c
   627  001128  EC98  F009         	call	_LCD_write_data_byte_4bit
   628                           
   629                           ;spi_test.c: 369:                 }
   630  00112C  2A5C               	incf	main@i_704^0,f,c
   631  00112E  0E04               	movlw	4
   632  001130  645C               	cpfsgt	main@i_704^0,c
   633  001132  D7F5               	goto	l1674
   634                           
   635                           ;spi_test.c: 371:                 spi_rx_flag = 0x00;
   636  001134  0E00               	movlw	0
   637  001136  6E69               	movwf	_spi_rx_flag^0,c
   638  001138  D79A               	goto	l1614
   639  00113A                     __end_of_main:
   640                           	callstack 0
   641                           
   642 ;; *************** function _SPI_Init_Slave_Default *****************
   643 ;; Defined at:
   644 ;;		line 70 in file "src/mssp_spi_driver.c"
   645 ;; Parameters:    Size  Location     Type
   646 ;;		None
   647 ;; Auto vars:     Size  Location     Type
   648 ;;		None
   649 ;; Return value:  Size  Location     Type
   650 ;;                  1    wreg      void 
   651 ;; Registers used:
   652 ;;		wreg, status,2, status,0
   653 ;; Tracked objects:
   654 ;;		On entry : 0/0
   655 ;;		On exit  : 0/0
   656 ;;		Unchanged: 0/0
   657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   662 ;;Total ram usage:        0 bytes
   663 ;; Hardware stack levels used:    1
   664 ;; Hardware stack levels required when called:    1
   665 ;; This function calls:
   666 ;;		Nothing
   667 ;; This function is called by:
   668 ;;		_main
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           	psect	text1
   673  0014C2                     __ptext1:
   674                           	callstack 0
   675  0014C2                     _SPI_Init_Slave_Default:
   676                           	callstack 29
   677                           
   678                           ;src/mssp_spi_driver.c: 72:     SSPCON1bits.SSPEN = 0;
   679                           
   680                           ;incstack = 0
   681  0014C2  9AC6               	bcf	198,5,c	;volatile
   682                           
   683                           ;src/mssp_spi_driver.c: 75:     SSPCON1 |= 0x00 | 0x04;
   684  0014C4  84C6               	bsf	198,2,c	;volatile
   685                           
   686                           ;src/mssp_spi_driver.c: 77:     SSPSTAT |= 0x40 | 0x00;
   687  0014C6  8CC7               	bsf	199,6,c	;volatile
   688                           
   689                           ;src/mssp_spi_driver.c: 80:     TRISC |= 0x18; TRISC &= ~(0x20); TRISA |= 0x20;
   690  0014C8  0E18               	movlw	24
   691  0014CA  1294               	iorwf	148,f,c	;volatile
   692  0014CC  9A94               	bcf	148,5,c	;volatile
   693  0014CE  8A92               	bsf	146,5,c	;volatile
   694                           
   695                           ;src/mssp_spi_driver.c: 83:     SSPCON1bits.SSPEN = 1;
   696  0014D0  8AC6               	bsf	198,5,c	;volatile
   697                           
   698                           ;src/mssp_spi_driver.c: 84:     SSPCON1bits.WCOL = 0;
   699  0014D2  9EC6               	bcf	198,7,c	;volatile
   700                           
   701                           ;src/mssp_spi_driver.c: 85:     SSPCON1bits.SSPOV = 0;
   702  0014D4  9CC6               	bcf	198,6,c	;volatile
   703                           
   704                           ;src/mssp_spi_driver.c: 86:     SSPBUF;
   705  0014D6  50C9               	movf	201,w,c	;volatile
   706                           
   707                           ;src/mssp_spi_driver.c: 87:     PIR1bits.SSPIF = 0;
   708  0014D8  969E               	bcf	158,3,c	;volatile
   709                           
   710                           ;src/mssp_spi_driver.c: 88:     spi_actor = SPI_SLAVE;
   711  0014DA  0E01               	movlw	1
   712  0014DC  6E6F               	movwf	_spi_actor^0,c
   713                           
   714                           ;src/mssp_spi_driver.c: 91:     PIE1bits.SSPIE = 1;
   715  0014DE  869D               	bsf	157,3,c	;volatile
   716  0014E0  0012               	return		;funcret
   717  0014E2                     __end_of_SPI_Init_Slave_Default:
   718                           	callstack 0
   719                           
   720 ;; *************** function _LCD_write_data_byte_4bit *****************
   721 ;; Defined at:
   722 ;;		line 126 in file "src/lcd_driver.c"
   723 ;; Parameters:    Size  Location     Type
   724 ;;  data            1    wreg     unsigned char 
   725 ;; Auto vars:     Size  Location     Type
   726 ;;  data            1    4[COMRAM] unsigned char 
   727 ;; Return value:  Size  Location     Type
   728 ;;                  1    wreg      void 
   729 ;; Registers used:
   730 ;;		wreg, status,2, status,0, cstack
   731 ;; Tracked objects:
   732 ;;		On entry : 0/0
   733 ;;		On exit  : 0/0
   734 ;;		Unchanged: 0/0
   735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   737 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   738 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   739 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   740 ;;Total ram usage:        2 bytes
   741 ;; Hardware stack levels used:    1
   742 ;; Hardware stack levels required when called:    2
   743 ;; This function calls:
   744 ;;		_LCD_enable_toggle
   745 ;; This function is called by:
   746 ;;		_main
   747 ;; This function uses a non-reentrant model
   748 ;;
   749                           
   750                           	psect	text2
   751  001330                     __ptext2:
   752                           	callstack 0
   753  001330                     _LCD_write_data_byte_4bit:
   754                           	callstack 28
   755                           
   756                           ;incstack = 0
   757                           ;LCD_write_data_byte_4bit@data stored from wreg
   758  001330  6E41               	movwf	LCD_write_data_byte_4bit@data^0,c
   759                           
   760                           ;src/lcd_driver.c: 128:     TRISC &= 0xFC; TRISD &= ~(1u << 1);
   761  001332  0EFC               	movlw	252
   762  001334  1694               	andwf	148,f,c	;volatile
   763  001336  9295               	bcf	149,1,c	;volatile
   764                           
   765                           ;src/lcd_driver.c: 129:     (TRISD &= 0x0Fu);
   766  001338  0E0F               	movlw	15
   767  00133A  1695               	andwf	149,f,c	;volatile
   768                           
   769                           ;src/lcd_driver.c: 130:     (LATCbits.LATC0 = 1u);
   770  00133C  808B               	bsf	139,0,c	;volatile
   771                           
   772                           ;src/lcd_driver.c: 131:     (LATCbits.LATC1 = 0u);
   773  00133E  928B               	bcf	139,1,c	;volatile
   774                           
   775                           ;src/lcd_driver.c: 134:     PORTD = (PORTD & 0x0F) | (data & 0xF0);
   776  001340  C041  F040         	movff	LCD_write_data_byte_4bit@data,??_LCD_write_data_byte_4bit
   777  001344  0EF0               	movlw	240
   778  001346  1640               	andwf	??_LCD_write_data_byte_4bit^0,f,c
   779  001348  5083               	movf	131,w,c	;volatile
   780  00134A  0B0F               	andlw	15
   781  00134C  1040               	iorwf	??_LCD_write_data_byte_4bit^0,w,c
   782  00134E  6E83               	movwf	131,c	;volatile
   783                           
   784                           ;src/lcd_driver.c: 135:     LCD_enable_toggle();
   785  001350  EC10  F009         	call	_LCD_enable_toggle	;wreg free
   786                           
   787                           ;src/lcd_driver.c: 136:     PORTD = (PORTD & 0x0F) | ((data<<4) & 0xF0);
   788  001354  C041  F040         	movff	LCD_write_data_byte_4bit@data,??_LCD_write_data_byte_4bit
   789  001358  3A40               	swapf	??_LCD_write_data_byte_4bit^0,f,c
   790  00135A  0EF0               	movlw	240
   791  00135C  1640               	andwf	??_LCD_write_data_byte_4bit^0,f,c
   792  00135E  0EF0               	movlw	240
   793  001360  1640               	andwf	??_LCD_write_data_byte_4bit^0,f,c
   794  001362  5083               	movf	131,w,c	;volatile
   795  001364  0B0F               	andlw	15
   796  001366  1040               	iorwf	??_LCD_write_data_byte_4bit^0,w,c
   797  001368  6E83               	movwf	131,c	;volatile
   798                           
   799                           ;src/lcd_driver.c: 137:     LCD_enable_toggle();
   800  00136A  EC10  F009         	call	_LCD_enable_toggle	;wreg free
   801                           
   802                           ;src/lcd_driver.c: 139:     _delay((unsigned long)((10)*(40000000u/4000.0)));
   803  00136E  0E82               	movlw	130
   804  001370  6E40               	movwf	??_LCD_write_data_byte_4bit^0,c
   805  001372  0EDE               	movlw	222
   806  001374                     u437:
   807  001374  2EE8               	decfsz	wreg,f,c
   808  001376  D7FE               	bra	u437
   809  001378  2E40               	decfsz	??_LCD_write_data_byte_4bit^0,f,c
   810  00137A  D7FC               	bra	u437
   811  00137C  0012               	return		;funcret
   812  00137E                     __end_of_LCD_write_data_byte_4bit:
   813                           	callstack 0
   814                           
   815 ;; *************** function _LCD_set_cursor_position *****************
   816 ;; Defined at:
   817 ;;		line 500 in file "src/lcd_driver.c"
   818 ;; Parameters:    Size  Location     Type
   819 ;;  line            1    wreg     unsigned char 
   820 ;;  pos_on_line     1    5[COMRAM] unsigned char 
   821 ;; Auto vars:     Size  Location     Type
   822 ;;  line            1    7[COMRAM] unsigned char 
   823 ;;  ddram_addr      1    6[COMRAM] unsigned char 
   824 ;; Return value:  Size  Location     Type
   825 ;;                  1    wreg      unsigned char 
   826 ;; Registers used:
   827 ;;		wreg, status,2, status,0, cstack
   828 ;; Tracked objects:
   829 ;;		On entry : 0/0
   830 ;;		On exit  : 0/0
   831 ;;		Unchanged: 0/0
   832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   833 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   834 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   836 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   837 ;;Total ram usage:        3 bytes
   838 ;; Hardware stack levels used:    1
   839 ;; Hardware stack levels required when called:    3
   840 ;; This function calls:
   841 ;;		_LCD_write_instr_byte_4bit
   842 ;;		_LCD_write_instr_byte_8bit
   843 ;; This function is called by:
   844 ;;		_main
   845 ;; This function uses a non-reentrant model
   846 ;;
   847                           
   848                           	psect	text3
   849  0012CC                     __ptext3:
   850                           	callstack 0
   851  0012CC                     _LCD_set_cursor_position:
   852                           	callstack 27
   853                           
   854                           ;incstack = 0
   855                           ;LCD_set_cursor_position@line stored from wreg
   856  0012CC  6E44               	movwf	LCD_set_cursor_position@line^0,c
   857                           
   858                           ;src/lcd_driver.c: 502:     if(line > 2u || pos_on_line > 2u * 16u){
   859  0012CE  0E03               	movlw	3
   860  0012D0  6044               	cpfslt	LCD_set_cursor_position@line^0,c
   861  0012D2  0012               	return	
   862  0012D4  0E20               	movlw	32
   863  0012D6  6442               	cpfsgt	LCD_set_cursor_position@pos_on_line^0,c
   864  0012D8  D001               	goto	l1540
   865  0012DA  0012               	return	
   866  0012DC                     l1540:
   867                           
   868                           ;src/lcd_driver.c: 511:         if(line == 1u && pos_on_line < 16u){
   869  0012DC  0444               	decf	LCD_set_cursor_position@line^0,w,c
   870  0012DE  A4D8               	btfss	status,2,c
   871  0012E0  D005               	goto	l1546
   872  0012E2  0E10               	movlw	16
   873  0012E4  6042               	cpfslt	LCD_set_cursor_position@pos_on_line^0,c
   874  0012E6  D002               	goto	l1546
   875                           
   876                           ;src/lcd_driver.c: 512:             ddram_addr = 0x00u + pos_on_line - 1;
   877  0012E8  0442               	decf	LCD_set_cursor_position@pos_on_line^0,w,c
   878  0012EA  D012               	goto	L3
   879  0012EC                     l1546:
   880  0012EC  0E02               	movlw	2
   881  0012EE  1844               	xorwf	LCD_set_cursor_position@line^0,w,c
   882  0012F0  A4D8               	btfss	status,2,c
   883  0012F2  D006               	goto	l1552
   884  0012F4  0E10               	movlw	16
   885  0012F6  6042               	cpfslt	LCD_set_cursor_position@pos_on_line^0,c
   886  0012F8  D003               	goto	l1552
   887                           
   888                           ;src/lcd_driver.c: 515:             ddram_addr = 0x40u + pos_on_line - 1;
   889  0012FA  5042               	movf	LCD_set_cursor_position@pos_on_line^0,w,c
   890  0012FC  0F3F               	addlw	63
   891  0012FE  D008               	goto	L3
   892  001300                     l1552:
   893  001300  0444               	decf	LCD_set_cursor_position@line^0,w,c
   894  001302  A4D8               	btfss	status,2,c
   895  001304  0012               	return	
   896  001306  0E10               	movlw	16
   897  001308  6442               	cpfsgt	LCD_set_cursor_position@pos_on_line^0,c
   898  00130A  0012               	return	
   899                           
   900                           ;src/lcd_driver.c: 518:             ddram_addr = 0x40u + pos_on_line - 16 - 1;
   901  00130C  5042               	movf	LCD_set_cursor_position@pos_on_line^0,w,c
   902  00130E  0F2F               	addlw	47
   903  001310                     L3:
   904  001310  6E43               	movwf	LCD_set_cursor_position@ddram_addr^0,c
   905                           
   906                           ;src/lcd_driver.c: 525:     if(DISP_BIT_MODE == MODE_4BIT){
   907                           
   908                           ;src/lcd_driver.c: 520:         } else{
   909  001312  5074               	movf	_DISP_BIT_MODE^0,w,c
   910  001314  A4D8               	btfss	status,2,c
   911  001316  D005               	goto	l1562
   912                           
   913                           ;src/lcd_driver.c: 526:         LCD_write_instr_byte_4bit(0x80u | ddram_addr);
   914  001318  5043               	movf	LCD_set_cursor_position@ddram_addr^0,w,c
   915  00131A  0980               	iorlw	128
   916  00131C  ECBF  F009         	call	_LCD_write_instr_byte_4bit
   917                           
   918                           ;src/lcd_driver.c: 527:     } else{
   919  001320  D004               	goto	l1564
   920  001322                     l1562:
   921                           
   922                           ;src/lcd_driver.c: 528:         LCD_write_instr_byte_8bit(0x80u | ddram_addr);
   923  001322  5043               	movf	LCD_set_cursor_position@ddram_addr^0,w,c
   924  001324  0980               	iorlw	128
   925  001326  EC3B  F00A         	call	_LCD_write_instr_byte_8bit
   926  00132A                     l1564:
   927                           
   928                           ;src/lcd_driver.c: 531:     address_counter = ddram_addr;
   929  00132A  C043  F071         	movff	LCD_set_cursor_position@ddram_addr,_address_counter
   930  00132E  0012               	return		;funcret
   931  001330                     __end_of_LCD_set_cursor_position:
   932                           	callstack 0
   933                           
   934 ;; *************** function _LCD_clear_display *****************
   935 ;; Defined at:
   936 ;;		line 427 in file "src/lcd_driver.c"
   937 ;; Parameters:    Size  Location     Type
   938 ;;		None
   939 ;; Auto vars:     Size  Location     Type
   940 ;;		None
   941 ;; Return value:  Size  Location     Type
   942 ;;                  1    wreg      unsigned char 
   943 ;; Registers used:
   944 ;;		wreg, status,2, status,0, cstack
   945 ;; Tracked objects:
   946 ;;		On entry : 0/0
   947 ;;		On exit  : 0/0
   948 ;;		Unchanged: 0/0
   949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   952 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   953 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   954 ;;Total ram usage:        1 bytes
   955 ;; Hardware stack levels used:    1
   956 ;; Hardware stack levels required when called:    3
   957 ;; This function calls:
   958 ;;		_LCD_write_instr_byte_4bit
   959 ;;		_LCD_write_instr_byte_8bit
   960 ;; This function is called by:
   961 ;;		_main
   962 ;; This function uses a non-reentrant model
   963 ;;
   964                           
   965                           	psect	text4
   966  00149E                     __ptext4:
   967                           	callstack 0
   968  00149E                     _LCD_clear_display:
   969                           	callstack 27
   970                           
   971                           ;src/lcd_driver.c: 428:     if(DISP_BIT_MODE == MODE_4BIT){
   972                           
   973                           ;incstack = 0
   974  00149E  5074               	movf	_DISP_BIT_MODE^0,w,c
   975  0014A0  A4D8               	btfss	status,2,c
   976  0014A2  D004               	goto	l1530
   977                           
   978                           ;src/lcd_driver.c: 429:         LCD_write_instr_byte_4bit(0x01u);
   979  0014A4  0E01               	movlw	1
   980  0014A6  ECBF  F009         	call	_LCD_write_instr_byte_4bit
   981                           
   982                           ;src/lcd_driver.c: 430:     } else{
   983  0014AA  D003               	goto	l1532
   984  0014AC                     l1530:
   985                           
   986                           ;src/lcd_driver.c: 431:         LCD_write_instr_byte_8bit(0x01u);
   987  0014AC  0E01               	movlw	1
   988  0014AE  EC3B  F00A         	call	_LCD_write_instr_byte_8bit
   989  0014B2                     l1532:
   990                           
   991                           ;src/lcd_driver.c: 434:     _delay((unsigned long)((10)*(40000000u/4000.0)));
   992  0014B2  0E82               	movlw	130
   993  0014B4  6E42               	movwf	??_LCD_clear_display^0,c
   994  0014B6  0EDE               	movlw	222
   995  0014B8                     u447:
   996  0014B8  2EE8               	decfsz	wreg,f,c
   997  0014BA  D7FE               	bra	u447
   998  0014BC  2E42               	decfsz	??_LCD_clear_display^0,f,c
   999  0014BE  D7FC               	bra	u447
  1000  0014C0  0012               	return		;funcret
  1001  0014C2                     __end_of_LCD_clear_display:
  1002                           	callstack 0
  1003                           
  1004 ;; *************** function _LCD_write_instr_byte_8bit *****************
  1005 ;; Defined at:
  1006 ;;		line 200 in file "src/lcd_driver.c"
  1007 ;; Parameters:    Size  Location     Type
  1008 ;;  instr           1    wreg     unsigned char 
  1009 ;; Auto vars:     Size  Location     Type
  1010 ;;  instr           1    4[COMRAM] unsigned char 
  1011 ;; Return value:  Size  Location     Type
  1012 ;;                  1    wreg      void 
  1013 ;; Registers used:
  1014 ;;		wreg, status,2, status,0, cstack
  1015 ;; Tracked objects:
  1016 ;;		On entry : 0/0
  1017 ;;		On exit  : 0/0
  1018 ;;		Unchanged: 0/0
  1019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1021 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1022 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1023 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1024 ;;Total ram usage:        2 bytes
  1025 ;; Hardware stack levels used:    1
  1026 ;; Hardware stack levels required when called:    2
  1027 ;; This function calls:
  1028 ;;		_LCD_enable_toggle
  1029 ;; This function is called by:
  1030 ;;		_LCD_clear_display
  1031 ;;		_LCD_set_cursor_position
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           	psect	text5
  1036  001476                     __ptext5:
  1037                           	callstack 0
  1038  001476                     _LCD_write_instr_byte_8bit:
  1039                           	callstack 27
  1040                           
  1041                           ;incstack = 0
  1042                           ;LCD_write_instr_byte_8bit@instr stored from wreg
  1043  001476  6E41               	movwf	LCD_write_instr_byte_8bit@instr^0,c
  1044                           
  1045                           ;src/lcd_driver.c: 202:     TRISC &= 0xFC; TRISD &= ~(1u << 1);
  1046  001478  0EFC               	movlw	252
  1047  00147A  1694               	andwf	148,f,c	;volatile
  1048  00147C  9295               	bcf	149,1,c	;volatile
  1049                           
  1050                           ;src/lcd_driver.c: 203:     (TRISD = 0x00u);
  1051  00147E  0E00               	movlw	0
  1052  001480  6E95               	movwf	149,c	;volatile
  1053                           
  1054                           ;src/lcd_driver.c: 204:     (LATCbits.LATC0 = 0u);
  1055  001482  908B               	bcf	139,0,c	;volatile
  1056                           
  1057                           ;src/lcd_driver.c: 205:     (LATCbits.LATC1 = 0u);
  1058  001484  928B               	bcf	139,1,c	;volatile
  1059                           
  1060                           ;src/lcd_driver.c: 208:     PORTD = instr;
  1061  001486  C041  FF83         	movff	LCD_write_instr_byte_8bit@instr,3971	;volatile
  1062                           
  1063                           ;src/lcd_driver.c: 209:     LCD_enable_toggle();
  1064  00148A  EC10  F009         	call	_LCD_enable_toggle	;wreg free
  1065                           
  1066                           ;src/lcd_driver.c: 211:     _delay((unsigned long)((10)*(40000000u/4000.0)));
  1067  00148E  0E82               	movlw	130
  1068  001490  6E40               	movwf	??_LCD_write_instr_byte_8bit^0,c
  1069  001492  0EDE               	movlw	222
  1070  001494                     u457:
  1071  001494  2EE8               	decfsz	wreg,f,c
  1072  001496  D7FE               	bra	u457
  1073  001498  2E40               	decfsz	??_LCD_write_instr_byte_8bit^0,f,c
  1074  00149A  D7FC               	bra	u457
  1075  00149C  0012               	return		;funcret
  1076  00149E                     __end_of_LCD_write_instr_byte_8bit:
  1077                           	callstack 0
  1078                           
  1079 ;; *************** function _LCD_Init_ECE376 *****************
  1080 ;; Defined at:
  1081 ;;		line 224 in file "src/lcd_driver.c"
  1082 ;; Parameters:    Size  Location     Type
  1083 ;;		None
  1084 ;; Auto vars:     Size  Location     Type
  1085 ;;		None
  1086 ;; Return value:  Size  Location     Type
  1087 ;;                  1    wreg      void 
  1088 ;; Registers used:
  1089 ;;		wreg, status,2, status,0, cstack
  1090 ;; Tracked objects:
  1091 ;;		On entry : 0/0
  1092 ;;		On exit  : 0/0
  1093 ;;		Unchanged: 0/0
  1094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1097 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1098 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1099 ;;Total ram usage:        2 bytes
  1100 ;; Hardware stack levels used:    1
  1101 ;; Hardware stack levels required when called:    3
  1102 ;; This function calls:
  1103 ;;		_LCD_write_instr_byte_4bit
  1104 ;; This function is called by:
  1105 ;;		_main
  1106 ;; This function uses a non-reentrant model
  1107 ;;
  1108                           
  1109                           	psect	text6
  1110  00113A                     __ptext6:
  1111                           	callstack 0
  1112  00113A                     _LCD_Init_ECE376:
  1113                           	callstack 27
  1114                           
  1115                           ;src/lcd_driver.c: 227:     PORTC = 0x00; PORTD = 0x00;
  1116                           
  1117                           ;incstack = 0
  1118  00113A  0E00               	movlw	0
  1119  00113C  6E82               	movwf	130,c	;volatile
  1120  00113E  0E00               	movlw	0
  1121  001140  6E83               	movwf	131,c	;volatile
  1122                           
  1123                           ;src/lcd_driver.c: 229:     TRISC &= 0xFC; TRISD &= ~(1u << 1);
  1124  001142  0EFC               	movlw	252
  1125  001144  1694               	andwf	148,f,c	;volatile
  1126  001146  9295               	bcf	149,1,c	;volatile
  1127                           
  1128                           ;src/lcd_driver.c: 230:     (TRISD |= 0xF0u);
  1129  001148  0EF0               	movlw	240
  1130  00114A  1295               	iorwf	149,f,c	;volatile
  1131                           
  1132                           ;src/lcd_driver.c: 234:     _delay((unsigned long)((4000)*(40000000u/4000.0)));
  1133  00114C  0ECB               	movlw	203
  1134  00114E  6E43               	movwf	(??_LCD_Init_ECE376+1)^0,c
  1135  001150  0EEC               	movlw	236
  1136  001152  6E42               	movwf	??_LCD_Init_ECE376^0,c
  1137  001154  0E84               	movlw	132
  1138  001156                     u467:
  1139  001156  2EE8               	decfsz	wreg,f,c
  1140  001158  D7FE               	bra	u467
  1141  00115A  2E42               	decfsz	??_LCD_Init_ECE376^0,f,c
  1142  00115C  D7FC               	bra	u467
  1143  00115E  2E43               	decfsz	(??_LCD_Init_ECE376+1)^0,f,c
  1144  001160  D7FA               	bra	u467
  1145  001162  D000               	nop2	
  1146                           
  1147                           ;src/lcd_driver.c: 235:     _delay((unsigned long)((4000)*(40000000u/4000.0)));
  1148  001164  0ECB               	movlw	203
  1149  001166  6E43               	movwf	(??_LCD_Init_ECE376+1)^0,c
  1150  001168  0EEC               	movlw	236
  1151  00116A  6E42               	movwf	??_LCD_Init_ECE376^0,c
  1152  00116C  0E84               	movlw	132
  1153  00116E                     u477:
  1154  00116E  2EE8               	decfsz	wreg,f,c
  1155  001170  D7FE               	bra	u477
  1156  001172  2E42               	decfsz	??_LCD_Init_ECE376^0,f,c
  1157  001174  D7FC               	bra	u477
  1158  001176  2E43               	decfsz	(??_LCD_Init_ECE376+1)^0,f,c
  1159  001178  D7FA               	bra	u477
  1160  00117A  D000               	nop2	
  1161                           
  1162                           ;src/lcd_driver.c: 236:     _delay((unsigned long)((2000)*(40000000u/4000.0)));
  1163  00117C  0E66               	movlw	102
  1164  00117E  6E43               	movwf	(??_LCD_Init_ECE376+1)^0,c
  1165  001180  0E76               	movlw	118
  1166  001182  6E42               	movwf	??_LCD_Init_ECE376^0,c
  1167  001184  0EC1               	movlw	193
  1168  001186                     u487:
  1169  001186  2EE8               	decfsz	wreg,f,c
  1170  001188  D7FE               	bra	u487
  1171  00118A  2E42               	decfsz	??_LCD_Init_ECE376^0,f,c
  1172  00118C  D7FC               	bra	u487
  1173  00118E  2E43               	decfsz	(??_LCD_Init_ECE376+1)^0,f,c
  1174  001190  D7FA               	bra	u487
  1175  001192  F000               	nop	
  1176                           
  1177                           ;src/lcd_driver.c: 241:     _delay((unsigned long)((100)*(40000000u/4000.0)));
  1178  001194  0E06               	movlw	6
  1179  001196  6E43               	movwf	(??_LCD_Init_ECE376+1)^0,c
  1180  001198  0E13               	movlw	19
  1181  00119A  6E42               	movwf	??_LCD_Init_ECE376^0,c
  1182  00119C  0EAE               	movlw	174
  1183  00119E                     u497:
  1184  00119E  2EE8               	decfsz	wreg,f,c
  1185  0011A0  D7FE               	bra	u497
  1186  0011A2  2E42               	decfsz	??_LCD_Init_ECE376^0,f,c
  1187  0011A4  D7FC               	bra	u497
  1188  0011A6  2E43               	decfsz	(??_LCD_Init_ECE376+1)^0,f,c
  1189  0011A8  D7FA               	bra	u497
  1190                           
  1191                           ;src/lcd_driver.c: 242:     LCD_write_instr_byte_4bit(0x30u);
  1192  0011AA  0E30               	movlw	48
  1193  0011AC  ECBF  F009         	call	_LCD_write_instr_byte_4bit
  1194                           
  1195                           ;src/lcd_driver.c: 243:     _delay((unsigned long)((5)*(40000000u/4000.0)));
  1196  0011B0  0E41               	movlw	65
  1197  0011B2  6E42               	movwf	??_LCD_Init_ECE376^0,c
  1198  0011B4  0EEE               	movlw	238
  1199  0011B6                     u507:
  1200  0011B6  2EE8               	decfsz	wreg,f,c
  1201  0011B8  D7FE               	bra	u507
  1202  0011BA  2E42               	decfsz	??_LCD_Init_ECE376^0,f,c
  1203  0011BC  D7FC               	bra	u507
  1204  0011BE  D000               	nop2	
  1205                           
  1206                           ;src/lcd_driver.c: 244:     LCD_write_instr_byte_4bit(0x30u);
  1207  0011C0  0E30               	movlw	48
  1208  0011C2  ECBF  F009         	call	_LCD_write_instr_byte_4bit
  1209                           
  1210                           ;src/lcd_driver.c: 245:     _delay((unsigned long)((150)*(40000000u/4000000.0)));
  1211  0011C6  0ED6               	movlw	214
  1212  0011C8                     u517:
  1213  0011C8  D000               	nop2	
  1214  0011CA  D000               	nop2	
  1215  0011CC  2EE8               	decfsz	wreg,f,c
  1216  0011CE  D7FC               	bra	u517
  1217  0011D0  D000               	nop2	
  1218                           
  1219                           ;src/lcd_driver.c: 246:     LCD_write_instr_byte_4bit(0x30u);
  1220  0011D2  0E30               	movlw	48
  1221  0011D4  ECBF  F009         	call	_LCD_write_instr_byte_4bit
  1222                           
  1223                           ;src/lcd_driver.c: 248:     LCD_write_instr_byte_4bit(0x28u);
  1224  0011D8  0E28               	movlw	40
  1225  0011DA  ECBF  F009         	call	_LCD_write_instr_byte_4bit
  1226                           
  1227                           ;src/lcd_driver.c: 249:     LCD_write_instr_byte_4bit(0x0Eu);
  1228  0011DE  0E0E               	movlw	14
  1229  0011E0  ECBF  F009         	call	_LCD_write_instr_byte_4bit
  1230                           
  1231                           ;src/lcd_driver.c: 250:     LCD_write_instr_byte_4bit(0x01u);
  1232  0011E4  0E01               	movlw	1
  1233  0011E6  ECBF  F009         	call	_LCD_write_instr_byte_4bit
  1234                           
  1235                           ;src/lcd_driver.c: 251:     LCD_write_instr_byte_4bit(0x06u);
  1236  0011EA  0E06               	movlw	6
  1237  0011EC  ECBF  F009         	call	_LCD_write_instr_byte_4bit
  1238                           
  1239                           ;src/lcd_driver.c: 253:     _delay((unsigned long)((100)*(40000000u/4000.0)));
  1240  0011F0  0E06               	movlw	6
  1241  0011F2  6E43               	movwf	(??_LCD_Init_ECE376+1)^0,c
  1242  0011F4  0E13               	movlw	19
  1243  0011F6  6E42               	movwf	??_LCD_Init_ECE376^0,c
  1244  0011F8  0EAE               	movlw	174
  1245  0011FA                     u527:
  1246  0011FA  2EE8               	decfsz	wreg,f,c
  1247  0011FC  D7FE               	bra	u527
  1248  0011FE  2E42               	decfsz	??_LCD_Init_ECE376^0,f,c
  1249  001200  D7FC               	bra	u527
  1250  001202  2E43               	decfsz	(??_LCD_Init_ECE376+1)^0,f,c
  1251  001204  D7FA               	bra	u527
  1252                           
  1253                           ;src/lcd_driver.c: 256:     CURRENT_DISP = QAPASS_EBAY;
  1254  001206  0E00               	movlw	0
  1255  001208  6E75               	movwf	_CURRENT_DISP^0,c
  1256                           
  1257                           ;src/lcd_driver.c: 257:     DISP_BIT_MODE = MODE_4BIT;
  1258  00120A  0E00               	movlw	0
  1259  00120C  6E74               	movwf	_DISP_BIT_MODE^0,c
  1260                           
  1261                           ;src/lcd_driver.c: 258:     init_complete = 0x01u;
  1262  00120E  0E01               	movlw	1
  1263  001210  6E73               	movwf	_init_complete^0,c
  1264                           
  1265                           ;src/lcd_driver.c: 259:     current_entry_mode = 0x06u;
  1266  001212  0E06               	movlw	6
  1267  001214  6E3A               	movwf	_current_entry_mode^0,c
  1268                           
  1269                           ;src/lcd_driver.c: 260:     current_disp_ctrl = 0x0Eu;
  1270  001216  0E0E               	movlw	14
  1271  001218  6E3C               	movwf	_current_disp_ctrl^0,c
  1272                           
  1273                           ;src/lcd_driver.c: 261:     current_func_set = 0x28u;
  1274  00121A  0E28               	movlw	40
  1275  00121C  6E39               	movwf	_current_func_set^0,c
  1276  00121E  0012               	return		;funcret
  1277  001220                     __end_of_LCD_Init_ECE376:
  1278                           	callstack 0
  1279                           
  1280 ;; *************** function _LCD_write_instr_byte_4bit *****************
  1281 ;; Defined at:
  1282 ;;		line 175 in file "src/lcd_driver.c"
  1283 ;; Parameters:    Size  Location     Type
  1284 ;;  instr           1    wreg     unsigned char 
  1285 ;; Auto vars:     Size  Location     Type
  1286 ;;  instr           1    4[COMRAM] unsigned char 
  1287 ;; Return value:  Size  Location     Type
  1288 ;;                  1    wreg      void 
  1289 ;; Registers used:
  1290 ;;		wreg, status,2, status,0, cstack
  1291 ;; Tracked objects:
  1292 ;;		On entry : 0/0
  1293 ;;		On exit  : 0/0
  1294 ;;		Unchanged: 0/0
  1295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1297 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1298 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1299 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1300 ;;Total ram usage:        2 bytes
  1301 ;; Hardware stack levels used:    1
  1302 ;; Hardware stack levels required when called:    2
  1303 ;; This function calls:
  1304 ;;		_LCD_enable_toggle
  1305 ;; This function is called by:
  1306 ;;		_LCD_Init_ECE376
  1307 ;;		_LCD_clear_display
  1308 ;;		_LCD_set_cursor_position
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312                           	psect	text7
  1313  00137E                     __ptext7:
  1314                           	callstack 0
  1315  00137E                     _LCD_write_instr_byte_4bit:
  1316                           	callstack 27
  1317                           
  1318                           ;incstack = 0
  1319                           ;LCD_write_instr_byte_4bit@instr stored from wreg
  1320  00137E  6E41               	movwf	LCD_write_instr_byte_4bit@instr^0,c
  1321                           
  1322                           ;src/lcd_driver.c: 177:     TRISC &= 0xFC; TRISD &= ~(1u << 1);
  1323  001380  0EFC               	movlw	252
  1324  001382  1694               	andwf	148,f,c	;volatile
  1325  001384  9295               	bcf	149,1,c	;volatile
  1326                           
  1327                           ;src/lcd_driver.c: 178:     (TRISD &= 0x0Fu);
  1328  001386  0E0F               	movlw	15
  1329  001388  1695               	andwf	149,f,c	;volatile
  1330                           
  1331                           ;src/lcd_driver.c: 179:     (LATCbits.LATC0 = 0u);
  1332  00138A  908B               	bcf	139,0,c	;volatile
  1333                           
  1334                           ;src/lcd_driver.c: 180:     (LATCbits.LATC1 = 0u);
  1335  00138C  928B               	bcf	139,1,c	;volatile
  1336                           
  1337                           ;src/lcd_driver.c: 183:     PORTD = (PORTD & 0x0F) | (instr & 0xF0);
  1338  00138E  C041  F040         	movff	LCD_write_instr_byte_4bit@instr,??_LCD_write_instr_byte_4bit
  1339  001392  0EF0               	movlw	240
  1340  001394  1640               	andwf	??_LCD_write_instr_byte_4bit^0,f,c
  1341  001396  5083               	movf	131,w,c	;volatile
  1342  001398  0B0F               	andlw	15
  1343  00139A  1040               	iorwf	??_LCD_write_instr_byte_4bit^0,w,c
  1344  00139C  6E83               	movwf	131,c	;volatile
  1345                           
  1346                           ;src/lcd_driver.c: 184:     LCD_enable_toggle();
  1347  00139E  EC10  F009         	call	_LCD_enable_toggle	;wreg free
  1348                           
  1349                           ;src/lcd_driver.c: 185:     PORTD = (PORTD & 0x0F) | ((instr<<4) & 0xF0);
  1350  0013A2  C041  F040         	movff	LCD_write_instr_byte_4bit@instr,??_LCD_write_instr_byte_4bit
  1351  0013A6  3A40               	swapf	??_LCD_write_instr_byte_4bit^0,f,c
  1352  0013A8  0EF0               	movlw	240
  1353  0013AA  1640               	andwf	??_LCD_write_instr_byte_4bit^0,f,c
  1354  0013AC  0EF0               	movlw	240
  1355  0013AE  1640               	andwf	??_LCD_write_instr_byte_4bit^0,f,c
  1356  0013B0  5083               	movf	131,w,c	;volatile
  1357  0013B2  0B0F               	andlw	15
  1358  0013B4  1040               	iorwf	??_LCD_write_instr_byte_4bit^0,w,c
  1359  0013B6  6E83               	movwf	131,c	;volatile
  1360                           
  1361                           ;src/lcd_driver.c: 186:     LCD_enable_toggle();
  1362  0013B8  EC10  F009         	call	_LCD_enable_toggle	;wreg free
  1363                           
  1364                           ;src/lcd_driver.c: 188:     _delay((unsigned long)((10)*(40000000u/4000.0)));
  1365  0013BC  0E82               	movlw	130
  1366  0013BE  6E40               	movwf	??_LCD_write_instr_byte_4bit^0,c
  1367  0013C0  0EDE               	movlw	222
  1368  0013C2                     u537:
  1369  0013C2  2EE8               	decfsz	wreg,f,c
  1370  0013C4  D7FE               	bra	u537
  1371  0013C6  2E40               	decfsz	??_LCD_write_instr_byte_4bit^0,f,c
  1372  0013C8  D7FC               	bra	u537
  1373  0013CA  0012               	return		;funcret
  1374  0013CC                     __end_of_LCD_write_instr_byte_4bit:
  1375                           	callstack 0
  1376                           
  1377 ;; *************** function _LCD_enable_toggle *****************
  1378 ;; Defined at:
  1379 ;;		line 45 in file "src/lcd_driver.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;		None
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;		None
  1384 ;; Return value:  Size  Location     Type
  1385 ;;                  1    wreg      void 
  1386 ;; Registers used:
  1387 ;;		wreg, status,2, status,0
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1395 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1396 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1397 ;;Total ram usage:        2 bytes
  1398 ;; Hardware stack levels used:    1
  1399 ;; Hardware stack levels required when called:    1
  1400 ;; This function calls:
  1401 ;;		Nothing
  1402 ;; This function is called by:
  1403 ;;		_LCD_write_data_byte_4bit
  1404 ;;		_LCD_write_instr_byte_4bit
  1405 ;;		_LCD_write_instr_byte_8bit
  1406 ;; This function uses a non-reentrant model
  1407 ;;
  1408                           
  1409                           	psect	text8
  1410  001220                     __ptext8:
  1411                           	callstack 0
  1412  001220                     _LCD_enable_toggle:
  1413                           	callstack 28
  1414                           
  1415                           ;src/lcd_driver.c: 46:     switch(CURRENT_DISP){
  1416                           
  1417                           ;incstack = 0
  1418  001220  D040               	goto	l1416
  1419  001222                     l66:
  1420                           
  1421                           ;src/lcd_driver.c: 49:             (LATDbits.LATD1 = 0u);
  1422  001222  928C               	bcf	140,1,c	;volatile
  1423                           
  1424                           ;src/lcd_driver.c: 50:             _delay((unsigned long)((2u)*(40000000u/4000000.0)));
  1425  001224  0E06               	movlw	6
  1426  001226                     u547:
  1427  001226  2EE8               	decfsz	wreg,f,c
  1428  001228  D7FE               	bra	u547
  1429  00122A  D000               	nop2	
  1430                           
  1431                           ;src/lcd_driver.c: 51:             (LATDbits.LATD1 = 1u);
  1432  00122C  828C               	bsf	140,1,c	;volatile
  1433                           
  1434                           ;src/lcd_driver.c: 52:             _delay((unsigned long)((2u)*(40000000u/4000000.0)));
  1435  00122E  0E06               	movlw	6
  1436  001230                     u557:
  1437  001230  2EE8               	decfsz	wreg,f,c
  1438  001232  D7FE               	bra	u557
  1439  001234  D000               	nop2	
  1440                           
  1441                           ;src/lcd_driver.c: 53:             (LATDbits.LATD1 = 0u);
  1442  001236  928C               	bcf	140,1,c	;volatile
  1443                           
  1444                           ;src/lcd_driver.c: 54:             _delay((unsigned long)((2u)*(40000000u/4000000.0)));
  1445  001238  0E06               	movlw	6
  1446  00123A                     u567:
  1447  00123A  2EE8               	decfsz	wreg,f,c
  1448  00123C  D7FE               	bra	u567
  1449  00123E  D000               	nop2	
  1450                           
  1451                           ;src/lcd_driver.c: 55:             break;
  1452  001240  0012               	return	
  1453  001242                     l68:
  1454                           
  1455                           ;src/lcd_driver.c: 58:             (LATDbits.LATD1 = 0u);
  1456  001242  928C               	bcf	140,1,c	;volatile
  1457                           
  1458                           ;src/lcd_driver.c: 59:             _delay((unsigned long)((1u)*(40000000u/4000000.0)));
  1459  001244  0E03               	movlw	3
  1460  001246                     u577:
  1461  001246  2EE8               	decfsz	wreg,f,c
  1462  001248  D7FE               	bra	u577
  1463  00124A  F000               	nop	
  1464                           
  1465                           ;src/lcd_driver.c: 60:             (LATDbits.LATD1 = 1u);
  1466  00124C  828C               	bsf	140,1,c	;volatile
  1467                           
  1468                           ;src/lcd_driver.c: 61:             _delay((unsigned long)((1u)*(40000000u/4000000.0)));
  1469  00124E  0E03               	movlw	3
  1470  001250                     u587:
  1471  001250  2EE8               	decfsz	wreg,f,c
  1472  001252  D7FE               	bra	u587
  1473  001254  F000               	nop	
  1474                           
  1475                           ;src/lcd_driver.c: 62:             (LATDbits.LATD1 = 0u);
  1476  001256  928C               	bcf	140,1,c	;volatile
  1477                           
  1478                           ;src/lcd_driver.c: 63:             _delay((unsigned long)((100u)*(40000000u/4000000.0)))
      +                          ;
  1479  001258  0EC8               	movlw	200
  1480  00125A                     u597:
  1481  00125A  D000               	nop2	
  1482  00125C  2EE8               	decfsz	wreg,f,c
  1483  00125E  D7FD               	bra	u597
  1484                           
  1485                           ;src/lcd_driver.c: 64:             break;
  1486  001260  0012               	return	
  1487  001262                     l69:
  1488                           
  1489                           ;src/lcd_driver.c: 67:             (LATDbits.LATD1 = 0u);
  1490  001262  928C               	bcf	140,1,c	;volatile
  1491                           
  1492                           ;src/lcd_driver.c: 68:             _delay((unsigned long)((2u)*(40000000u/4000000.0)));
  1493  001264  0E06               	movlw	6
  1494  001266                     u607:
  1495  001266  2EE8               	decfsz	wreg,f,c
  1496  001268  D7FE               	bra	u607
  1497  00126A  D000               	nop2	
  1498                           
  1499                           ;src/lcd_driver.c: 69:             (LATDbits.LATD1 = 1u);
  1500  00126C  828C               	bsf	140,1,c	;volatile
  1501                           
  1502                           ;src/lcd_driver.c: 70:             _delay((unsigned long)((2u)*(40000000u/4000000.0)));
  1503  00126E  0E06               	movlw	6
  1504  001270                     u617:
  1505  001270  2EE8               	decfsz	wreg,f,c
  1506  001272  D7FE               	bra	u617
  1507  001274  D000               	nop2	
  1508                           
  1509                           ;src/lcd_driver.c: 71:             (LATDbits.LATD1 = 0u);
  1510  001276  928C               	bcf	140,1,c	;volatile
  1511                           
  1512                           ;src/lcd_driver.c: 72:             _delay((unsigned long)((2u)*(40000000u/4000000.0)));
  1513  001278  0E06               	movlw	6
  1514  00127A                     u627:
  1515  00127A  2EE8               	decfsz	wreg,f,c
  1516  00127C  D7FE               	bra	u627
  1517  00127E  D000               	nop2	
  1518                           
  1519                           ;src/lcd_driver.c: 73:             break;
  1520  001280  0012               	return	
  1521  001282                     l70:
  1522                           
  1523                           ;src/lcd_driver.c: 76:             (LATDbits.LATD1 = 0u);
  1524  001282  928C               	bcf	140,1,c	;volatile
  1525                           
  1526                           ;src/lcd_driver.c: 77:             _delay((unsigned long)((2u)*(40000000u/4000000.0)));
  1527  001284  0E06               	movlw	6
  1528  001286                     u637:
  1529  001286  2EE8               	decfsz	wreg,f,c
  1530  001288  D7FE               	bra	u637
  1531  00128A  D000               	nop2	
  1532                           
  1533                           ;src/lcd_driver.c: 78:             (LATDbits.LATD1 = 1u);
  1534  00128C  828C               	bsf	140,1,c	;volatile
  1535                           
  1536                           ;src/lcd_driver.c: 79:             _delay((unsigned long)((2u)*(40000000u/4000000.0)));
  1537  00128E  0E06               	movlw	6
  1538  001290                     u647:
  1539  001290  2EE8               	decfsz	wreg,f,c
  1540  001292  D7FE               	bra	u647
  1541  001294  D000               	nop2	
  1542                           
  1543                           ;src/lcd_driver.c: 80:             (LATDbits.LATD1 = 0u);
  1544  001296  928C               	bcf	140,1,c	;volatile
  1545                           
  1546                           ;src/lcd_driver.c: 81:             _delay((unsigned long)((2u)*(40000000u/4000000.0)));
  1547  001298  0E06               	movlw	6
  1548  00129A                     u657:
  1549  00129A  2EE8               	decfsz	wreg,f,c
  1550  00129C  D7FE               	bra	u657
  1551  00129E  D000               	nop2	
  1552                           
  1553                           ;src/lcd_driver.c: 82:             break;
  1554  0012A0  0012               	return	
  1555  0012A2                     l1416:
  1556  0012A2  5075               	movf	_CURRENT_DISP^0,w,c
  1557  0012A4  6E3E               	movwf	??_LCD_enable_toggle^0,c
  1558  0012A6  6A3F               	clrf	(??_LCD_enable_toggle+1)^0,c
  1559                           
  1560                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1561                           ; Switch size 1, requested type "simple"
  1562                           ; Number of cases is 1, Range of values is 0 to 0
  1563                           ; switch strategies available:
  1564                           ; Name         Instructions Cycles
  1565                           ; simple_byte            4     3 (average)
  1566                           ;	Chosen strategy is simple_byte
  1567  0012A8  503F               	movf	(??_LCD_enable_toggle+1)^0,w,c
  1568  0012AA  0A00               	xorlw	0	; case 0
  1569  0012AC  A4D8               	btfss	status,2,c
  1570  0012AE  0012               	return	
  1571                           
  1572                           ; Switch size 1, requested type "simple"
  1573                           ; Number of cases is 4, Range of values is 0 to 3
  1574                           ; switch strategies available:
  1575                           ; Name         Instructions Cycles
  1576                           ; simple_byte           13     7 (average)
  1577                           ;	Chosen strategy is simple_byte
  1578  0012B0  503E               	movf	??_LCD_enable_toggle^0,w,c
  1579  0012B2  0A00               	xorlw	0	; case 0
  1580  0012B4  B4D8               	btfsc	status,2,c
  1581  0012B6  D7B5               	goto	l66
  1582  0012B8  0A01               	xorlw	1	; case 1
  1583  0012BA  B4D8               	btfsc	status,2,c
  1584  0012BC  D7C2               	goto	l68
  1585  0012BE  0A03               	xorlw	3	; case 2
  1586  0012C0  B4D8               	btfsc	status,2,c
  1587  0012C2  D7CF               	goto	l69
  1588  0012C4  0A01               	xorlw	1	; case 3
  1589  0012C6  A4D8               	btfss	status,2,c
  1590  0012C8  0012               	return	
  1591  0012CA  D7DB               	goto	l70
  1592  0012CC                     __end_of_LCD_enable_toggle:
  1593                           	callstack 0
  1594                           
  1595 ;; *************** function _isr *****************
  1596 ;; Defined at:
  1597 ;;		line 134 in file "spi_test.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;		None
  1600 ;; Auto vars:     Size  Location     Type
  1601 ;;		None
  1602 ;; Return value:  Size  Location     Type
  1603 ;;                  1    wreg      void 
  1604 ;; Registers used:
  1605 ;;		wreg, status,2, status,0
  1606 ;; Tracked objects:
  1607 ;;		On entry : 0/0
  1608 ;;		On exit  : 0/0
  1609 ;;		Unchanged: 0/0
  1610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1613 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1614 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1615 ;;Total ram usage:        1 bytes
  1616 ;; Hardware stack levels used:    1
  1617 ;; This function calls:
  1618 ;;		Nothing
  1619 ;; This function is called by:
  1620 ;;		Interrupt level 2
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           	psect	intcode
  1625  000008                     __pintcode:
  1626                           	callstack 0
  1627  000008                     _isr:
  1628                           	callstack 27
  1629                           
  1630                           ;incstack = 0
  1631  000008  8276               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1632  00000A  ED21  F00A         	call	int_func,f	;refresh shadow registers
  1633                           
  1634                           	psect	intcode_body
  1635  001442                     __pintcode_body:
  1636                           	callstack 27
  1637  001442                     int_func:
  1638                           	callstack 27
  1639  001442  0006               	pop		; remove dummy address from shadow register refresh
  1640                           
  1641                           ;spi_test.c: 142:     if(PIR1bits.SSPIF && PIE1bits.SSPIE) {
  1642  001444  B69E               	btfsc	158,3,c	;volatile
  1643  001446  A69D               	btfss	157,3,c	;volatile
  1644  001448  D014               	goto	i2l345
  1645                           
  1646                           ;spi_test.c: 144:         transfer_complete_flag = 0x01;
  1647  00144A  0E01               	movlw	1
  1648  00144C  6E6D               	movwf	_transfer_complete_flag^0,c
  1649                           
  1650                           ;spi_test.c: 147:         spi_rx_msg_buf = SSPBUF;
  1651  00144E  CFC9 F06B          	movff	4041,_spi_rx_msg_buf	;volatile
  1652                           
  1653                           ;spi_test.c: 148:         spi_rx_flag = 0x01;
  1654  001452  0E01               	movlw	1
  1655  001454  6E69               	movwf	_spi_rx_flag^0,c
  1656                           
  1657                           ;spi_test.c: 151:         if((spi_rx_msg_buf & 0xC0u) != 0x00u){
  1658  001456  C06B  F03D         	movff	_spi_rx_msg_buf,??_isr
  1659  00145A  0EC0               	movlw	192
  1660  00145C  163D               	andwf	??_isr^0,f,c
  1661  00145E  B4D8               	btfsc	status,2,c
  1662  001460  D005               	goto	i2l1286
  1663                           
  1664                           ;spi_test.c: 152:             SSPBUF = (0x40u | 0x2Au);
  1665  001462  0E6A               	movlw	106
  1666  001464  6EC9               	movwf	201,c	;volatile
  1667                           
  1668                           ;spi_test.c: 153:             spi_rx_invalid_flag = 0x01;
  1669  001466  0E01               	movlw	1
  1670  001468  6E6A               	movwf	_spi_rx_invalid_flag^0,c
  1671                           
  1672                           ;spi_test.c: 154:         } else {
  1673  00146A  D002               	goto	i2l1288
  1674  00146C                     i2l1286:
  1675                           
  1676                           ;spi_test.c: 155:             SSPBUF = 0x3Bu;
  1677  00146C  0E3B               	movlw	59
  1678  00146E  6EC9               	movwf	201,c	;volatile
  1679  001470                     i2l1288:
  1680                           
  1681                           ;spi_test.c: 160:         PIR1bits.SSPIF = 0;
  1682  001470  969E               	bcf	158,3,c	;volatile
  1683  001472                     i2l345:
  1684  001472  9276               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1685  001474  0011               	retfie		f
  1686  001476                     __end_of_isr:
  1687                           	callstack 0
  1688                           
  1689                           	psect	rparam
  1690  0000                     
  1691                           	psect	temp
  1692  000076                     btemp:
  1693                           	callstack 0
  1694  000076                     	ds	1
  1695  0000                     int$flags	set	btemp
  1696  0000                     wtemp8	set	btemp+1
  1697  0000                     ttemp5	set	btemp+1
  1698  0000                     ttemp6	set	btemp+4
  1699  0000                     ttemp7	set	btemp+8
  1700                           
  1701                           	psect	idloc
  1702                           
  1703                           ;Config register IDLOC0 @ 0x200000
  1704                           ;	unspecified, using default values
  1705  200000                     	org	2097152
  1706  200000  FF                 	db	255
  1707                           
  1708                           ;Config register IDLOC1 @ 0x200001
  1709                           ;	unspecified, using default values
  1710  200001                     	org	2097153
  1711  200001  FF                 	db	255
  1712                           
  1713                           ;Config register IDLOC2 @ 0x200002
  1714                           ;	unspecified, using default values
  1715  200002                     	org	2097154
  1716  200002  FF                 	db	255
  1717                           
  1718                           ;Config register IDLOC3 @ 0x200003
  1719                           ;	unspecified, using default values
  1720  200003                     	org	2097155
  1721  200003  FF                 	db	255
  1722                           
  1723                           ;Config register IDLOC4 @ 0x200004
  1724                           ;	unspecified, using default values
  1725  200004                     	org	2097156
  1726  200004  FF                 	db	255
  1727                           
  1728                           ;Config register IDLOC5 @ 0x200005
  1729                           ;	unspecified, using default values
  1730  200005                     	org	2097157
  1731  200005  FF                 	db	255
  1732                           
  1733                           ;Config register IDLOC6 @ 0x200006
  1734                           ;	unspecified, using default values
  1735  200006                     	org	2097158
  1736  200006  FF                 	db	255
  1737                           
  1738                           ;Config register IDLOC7 @ 0x200007
  1739                           ;	unspecified, using default values
  1740  200007                     	org	2097159
  1741  200007  FF                 	db	255
  1742                           
  1743                           	psect	config
  1744                           
  1745                           ; Padding undefined space
  1746  300000                     	org	3145728
  1747  300000  FF                 	db	255
  1748                           
  1749                           ;Config register CONFIG1H @ 0x300001
  1750                           ;	Oscillator Selection bits
  1751                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  1752                           ;	Fail-Safe Clock Monitor Enable bit
  1753                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1754                           ;	Internal/External Oscillator Switchover bit
  1755                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1756  300001                     	org	3145729
  1757  300001  06                 	db	6
  1758                           
  1759                           ;Config register CONFIG2L @ 0x300002
  1760                           ;	Power-up Timer Enable bit
  1761                           ;	PWRT = OFF, PWRT disabled
  1762                           ;	Brown-out Reset Enable bits
  1763                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1764                           ;	Brown Out Reset Voltage bits
  1765                           ;	BORV = 3, Minimum setting
  1766  300002                     	org	3145730
  1767  300002  1F                 	db	31
  1768                           
  1769                           ;Config register CONFIG2H @ 0x300003
  1770                           ;	Watchdog Timer Enable bit
  1771                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1772                           ;	Watchdog Timer Postscale Select bits
  1773                           ;	WDTPS = 32768, 1:32768
  1774  300003                     	org	3145731
  1775  300003  1E                 	db	30
  1776                           
  1777                           ; Padding undefined space
  1778  300004                     	org	3145732
  1779  300004  FF                 	db	255
  1780                           
  1781                           ;Config register CONFIG3H @ 0x300005
  1782                           ;	CCP2 MUX bit
  1783                           ;	CCP2MX = PORTBE, CCP2 input/output is multiplexed with RB3
  1784                           ;	PORTB A/D Enable bit
  1785                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1786                           ;	Low-Power Timer1 Oscillator Enable bit
  1787                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1788                           ;	MCLR Pin Enable bit
  1789                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1790  300005                     	org	3145733
  1791  300005  80                 	db	128
  1792                           
  1793                           ;Config register CONFIG4L @ 0x300006
  1794                           ;	Stack Full/Underflow Reset Enable bit
  1795                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1796                           ;	Single-Supply ICSP Enable bit
  1797                           ;	LVP = OFF, Single-Supply ICSP disabled
  1798                           ;	Extended Instruction Set Enable bit
  1799                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1800                           ;	Background Debugger Enable bit
  1801                           ;	DEBUG = 0x1, unprogrammed default
  1802  300006                     	org	3145734
  1803  300006  81                 	db	129
  1804                           
  1805                           ; Padding undefined space
  1806  300007                     	org	3145735
  1807  300007  FF                 	db	255
  1808                           
  1809                           ;Config register CONFIG5L @ 0x300008
  1810                           ;	Code Protection bit
  1811                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  1812                           ;	Code Protection bit
  1813                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  1814                           ;	Code Protection bit
  1815                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  1816                           ;	Code Protection bit
  1817                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  1818  300008                     	org	3145736
  1819  300008  0F                 	db	15
  1820                           
  1821                           ;Config register CONFIG5H @ 0x300009
  1822                           ;	Boot Block Code Protection bit
  1823                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1824                           ;	Data EEPROM Code Protection bit
  1825                           ;	CPD = OFF, Data EEPROM not code-protected
  1826  300009                     	org	3145737
  1827  300009  C0                 	db	192
  1828                           
  1829                           ;Config register CONFIG6L @ 0x30000A
  1830                           ;	Write Protection bit
  1831                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  1832                           ;	Write Protection bit
  1833                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  1834                           ;	Write Protection bit
  1835                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  1836                           ;	Write Protection bit
  1837                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  1838  30000A                     	org	3145738
  1839  30000A  0F                 	db	15
  1840                           
  1841                           ;Config register CONFIG6H @ 0x30000B
  1842                           ;	Configuration Register Write Protection bit
  1843                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1844                           ;	Boot Block Write Protection bit
  1845                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  1846                           ;	Data EEPROM Write Protection bit
  1847                           ;	WRTD = OFF, Data EEPROM not write-protected
  1848  30000B                     	org	3145739
  1849  30000B  E0                 	db	224
  1850                           
  1851                           ;Config register CONFIG7L @ 0x30000C
  1852                           ;	Table Read Protection bit
  1853                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  1854                           ;	Table Read Protection bit
  1855                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1856                           ;	Table Read Protection bit
  1857                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  1858                           ;	Table Read Protection bit
  1859                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  1860  30000C                     	org	3145740
  1861  30000C  0F                 	db	15
  1862                           
  1863                           ;Config register CONFIG7H @ 0x30000D
  1864                           ;	Boot Block Table Read Protection bit
  1865                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1866  30000D                     	org	3145741
  1867  30000D  40                 	db	64
  1868                           tosu	equ	0xFFF
  1869                           tosh	equ	0xFFE
  1870                           tosl	equ	0xFFD
  1871                           stkptr	equ	0xFFC
  1872                           pclatu	equ	0xFFB
  1873                           pclath	equ	0xFFA
  1874                           pcl	equ	0xFF9
  1875                           tblptru	equ	0xFF8
  1876                           tblptrh	equ	0xFF7
  1877                           tblptrl	equ	0xFF6
  1878                           tablat	equ	0xFF5
  1879                           prodh	equ	0xFF4
  1880                           prodl	equ	0xFF3
  1881                           indf0	equ	0xFEF
  1882                           postinc0	equ	0xFEE
  1883                           postdec0	equ	0xFED
  1884                           preinc0	equ	0xFEC
  1885                           plusw0	equ	0xFEB
  1886                           fsr0h	equ	0xFEA
  1887                           fsr0l	equ	0xFE9
  1888                           wreg	equ	0xFE8
  1889                           indf1	equ	0xFE7
  1890                           postinc1	equ	0xFE6
  1891                           postdec1	equ	0xFE5
  1892                           preinc1	equ	0xFE4
  1893                           plusw1	equ	0xFE3
  1894                           fsr1h	equ	0xFE2
  1895                           fsr1l	equ	0xFE1
  1896                           bsr	equ	0xFE0
  1897                           indf2	equ	0xFDF
  1898                           postinc2	equ	0xFDE
  1899                           postdec2	equ	0xFDD
  1900                           preinc2	equ	0xFDC
  1901                           plusw2	equ	0xFDB
  1902                           fsr2h	equ	0xFDA
  1903                           fsr2l	equ	0xFD9
  1904                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    13
    Data        60
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     32     117
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_LCD_set_cursor_position
    _LCD_write_data_byte_4bit->_LCD_enable_toggle
    _LCD_set_cursor_position->_LCD_write_instr_byte_4bit
    _LCD_set_cursor_position->_LCD_write_instr_byte_8bit
    _LCD_clear_display->_LCD_write_instr_byte_4bit
    _LCD_clear_display->_LCD_write_instr_byte_8bit
    _LCD_write_instr_byte_8bit->_LCD_enable_toggle
    _LCD_Init_ECE376->_LCD_write_instr_byte_4bit
    _LCD_write_instr_byte_4bit->_LCD_enable_toggle

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0    1179
                                              8 COMRAM    24    24      0
                    _LCD_Init_ECE376
                  _LCD_clear_display
            _LCD_set_cursor_position
           _LCD_write_data_byte_4bit
             _SPI_Init_Slave_Default
 ---------------------------------------------------------------------------------
 (1) _SPI_Init_Slave_Default                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_write_data_byte_4bit                             2     2      0      44
                                              3 COMRAM     2     2      0
                  _LCD_enable_toggle
 ---------------------------------------------------------------------------------
 (1) _LCD_set_cursor_position                              3     2      1     681
                                              5 COMRAM     3     2      1
          _LCD_write_instr_byte_4bit
          _LCD_write_instr_byte_8bit
 ---------------------------------------------------------------------------------
 (1) _LCD_clear_display                                    1     1      0      66
                                              5 COMRAM     1     1      0
          _LCD_write_instr_byte_4bit
          _LCD_write_instr_byte_8bit
 ---------------------------------------------------------------------------------
 (2) _LCD_write_instr_byte_8bit                            2     2      0      22
                                              3 COMRAM     2     2      0
                  _LCD_enable_toggle
 ---------------------------------------------------------------------------------
 (1) _LCD_Init_ECE376                                      2     2      0      44
                                              5 COMRAM     2     2      0
          _LCD_write_instr_byte_4bit
 ---------------------------------------------------------------------------------
 (2) _LCD_write_instr_byte_4bit                            2     2      0      44
                                              3 COMRAM     2     2      0
                  _LCD_enable_toggle
 ---------------------------------------------------------------------------------
 (2) _LCD_enable_toggle                                    2     2      0       0
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init_ECE376
     _LCD_write_instr_byte_4bit
       _LCD_enable_toggle
   _LCD_clear_display
     _LCD_write_instr_byte_4bit
       _LCD_enable_toggle
     _LCD_write_instr_byte_8bit
       _LCD_enable_toggle
   _LCD_set_cursor_position
     _LCD_write_instr_byte_4bit
       _LCD_enable_toggle
     _LCD_write_instr_byte_8bit
       _LCD_enable_toggle
   _LCD_write_data_byte_4bit
     _LCD_enable_toggle
   _SPI_Init_Slave_Default

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     20      75       1       92.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      75      34        0.0%
DATA                 0      0      75       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu Nov 11 17:04:34 2021

                                l70 1282                                  l66 1222  
                                l68 1242                                  l69 1262  
            _transfer_complete_flag 006D                                 l356 10B4  
                               u331 1030                                 u507 11B6  
                               u427 105C                                 u517 11C8  
                               u437 1374                                 u607 1266  
                               u527 11FA                                 u447 14B8  
                               u617 1270                                 u537 13C2  
                               u457 1494                                 u627 127A  
                               u547 1226                                 u467 1156  
                               u637 1286                                 u557 1230  
                               u477 116E                                 u647 1290  
                               u567 123A                                 u487 1186  
                               u657 129A                                 u577 1246  
                               u497 119E                                 u587 1250  
                               u597 125A                                 _isr 0008  
                               wreg 000FE8                  _current_entry_mode 003A  
                              l1416 12A2                                l1530 14AC  
                              l1532 14B2                                l1540 12DC  
                              l1604 103C                                l1614 106E  
                              l1552 1300                                l1562 1322  
                              l1546 12EC                                l1626 108C  
                              l1564 132A                                l1660 10FA  
                              l1644 10D8                                l1636 10C0  
                              l1674 111E                                ?_isr 003D  
                              _main 1010                                fsr2h 000FDA  
                              indf2 000FDF                                fsr1l 000FE1  
                              fsr2l 000FD9                                btemp 0076  
                              start 000E                        ___param_bank 000000  
                             ??_isr 003D             __end_of_LCD_Init_ECE376 1220  
                             ?_main 003D        LCD_write_uint32_number@F2549 005D  
                             i2l345 1472                               _PORTC 000F82  
                             _PORTD 000F83                               _TRISA 000F92  
                             _TRISC 000F94                               _TRISD 000F95  
 LCD_set_cursor_position@ddram_addr 0043                               main@i 0059  
  __size_of_LCD_set_cursor_position 0064                               tablat 000FF5  
      LCD_write_data_byte_4bit@data 0041                               plusw1 000FE3  
                             plusw2 000FDB                               ttemp5 0077  
                             ttemp6 007A                               ttemp7 007E  
                             status 000FD8                               wtemp8 0077  
       LCD_set_cursor_position@line 0044                     __initialization 1408  
                      __end_of_main 113A                              ??_main 0045  
       ??_LCD_write_instr_byte_4bit 0040         ??_LCD_write_instr_byte_8bit 0040  
                     __activetblptr 000002                              i2l1286 146C  
                            i2l1288 1470                              _SSPBUF 000FC9  
                _spi_rx_invalid_msg 1001                              clear_0 142E  
                  ?_LCD_Init_ECE376 003D    __end_of_LCD_write_data_byte_4bit 137E  
                      __pdataCOMRAM 0001                        __mediumconst 0000  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                          __accesstop 0080  
           __end_of__initialization 1434           _LCD_write_instr_byte_4bit 137E  
         _LCD_write_instr_byte_8bit 1476                       ___rparam_used 000001  
                    __pcstackCOMRAM 003D                       _button1_state 0068  
                     _button2_state 0067                       _init_complete 0073  
           _LCD_set_cursor_position 12CC            ??_SPI_Init_Slave_Default 003E  
          _LCD_write_data_byte_4bit 1330                             _SSPCON1 000FC6  
                           _SSPSTAT 000FC7                             __Hparam 0000  
                           __Lparam 0000                        __psmallconst 1000  
                           __pcinit 1408                             __ramtop 1000  
                           __ptext0 1010                             __ptext1 14C2  
                           __ptext2 1330                             __ptext3 12CC  
                           __ptext4 149E                             __ptext5 1476  
                           __ptext6 113A                             __ptext7 137E  
                           __ptext8 1220                 _spi_rx_invalid_flag 006A  
                      __size_of_isr 146E           ??_LCD_set_cursor_position 0043  
                    __pintcode_body 1442                end_of_initialization 1434  
                     __Lmediumconst 0000                             int_func 1442  
                        _shift_mode 0072                             postdec1 000FE5  
                           postinc0 000FEE                          _slave_mode 006E  
   __size_of_SPI_Init_Slave_Default 0020  LCD_set_cursor_position@pos_on_line 0042  
                   _address_counter 0071                        _CURRENT_DISP 0075  
                  _current_func_set 0039                main@init_success_msg 0047  
                 _LCD_clear_display 149E                       __pidataCOMRAM 13CC  
                ?_LCD_clear_display 003D                 start_initialization 1408  
               ??_LCD_clear_display 0042                         __end_of_isr 1476  
          __size_of_LCD_Init_ECE376 00E6              _SPI_Init_Slave_Default 14C2  
         __end_of_LCD_clear_display 14C2          ??_LCD_write_data_byte_4bit 0040  
                       __pbssCOMRAM 005D                         _debug_msg_1 0011  
                       _debug_msg_2 0001                           __pintcode 0008  
                         _disp_16x2 003B                   _LCD_enable_toggle 1220  
                ?_LCD_enable_toggle 003D                         __smallconst 1000  
               ??_LCD_enable_toggle 003E                        _receive_byte 0070  
                          _LATCbits 000F8B                            _LATDbits 000F8C  
                 ??_LCD_Init_ECE376 0042                            _PIE1bits 000F9D  
                     _DISP_BIT_MODE 0074           __end_of_LCD_enable_toggle 12CC  
                          _PIR1bits 000F9E          __size_of_LCD_clear_display 0024  
                         main@F2571 0021                           _spi_actor 006F  
                         main@i_700 005A                           main@i_703 005B  
                         main@i_704 005C      LCD_write_instr_byte_4bit@instr 0041  
                         copy_data0 141C      LCD_write_instr_byte_8bit@instr 0041  
                          __Hrparam 0000                            __Lrparam 0000  
          ?_LCD_set_cursor_position 0042                         _button1_msg 0034  
                       _button2_msg 002F             ?_SPI_Init_Slave_Default 003D  
                          _main$701 0055                            _main$702 0057  
                     __size_of_main 012A          __size_of_LCD_enable_toggle 00AC  
                          int$flags 0076  __size_of_LCD_write_instr_byte_4bit 004E  
__size_of_LCD_write_instr_byte_8bit 0028          ?_LCD_write_instr_byte_4bit 003D  
        ?_LCD_write_instr_byte_8bit 003D      __end_of_SPI_Init_Slave_Default 14E2  
                        _INTCONbits 000FF2                            intlevel2 0000  
        __end_of_spi_rx_invalid_msg 100E     __end_of_LCD_set_cursor_position 1330  
                    _spi_rx_msg_buf 006B   __end_of_LCD_write_instr_byte_4bit 13CC  
 __end_of_LCD_write_instr_byte_8bit 149E                     _manual_transfer 006C  
                   _LCD_Init_ECE376 113A                         _SSPCON1bits 000FC6  
 __size_of_LCD_write_data_byte_4bit 004E           ?_LCD_write_data_byte_4bit 003D  
                       _spi_rx_flag 0069                   _current_disp_ctrl 003C  
